#include "RayTracing.h"

#include <iostream>
#include <assert.h>

#include "Device.h"

#include "SphereCreator.h"
#include "length_cm.h"

using std::cout;
using std::endl;

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Imported	 	*|
 \*-------------------------------------*/

extern __host__ void uploadGPU(Sphere* tabSphere);

extern __global__ void rayTracingGM(Sphere* ptrDevTabSphere, uchar4* ptrDevPixels, uint w, uint h, float t);
extern __global__ void rayTracingCM(uchar4* ptrDevPixels, uint w, uint h, float t);

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

/*-------------------------*\
 |*	Constructeur	    *|
 \*-------------------------*/

RayTracing::RayTracing(const Grid& grid, uint w, uint h, float dt) :
	Animable_I<uchar4>(grid, w, h, "RayTracing_Cuda_RGBA_uchar4")
    {
    // Inputs
    this->dt = dt;

    // Tools
    this->t = 0; // protected dans Animable

    SphereCreator sphereCreator(LENGTH_CM, w, h);
    Sphere* ptrTabSphere = sphereCreator.getTabSphere();

    uploadGPU(ptrTabSphere);

    this->sizeOctetSpheres = LENGTH_CM * sizeof(Sphere);

    // MM
    	{

    	// MM (malloc Device)
    	    {
    	    Device::malloc(&ptrDevTabSphere, sizeOctetSpheres);
    	    Device::memclear(ptrDevTabSphere, sizeOctetSpheres);
    	    }

    	// MM (copy Host->Device)
    	    {
    	    Device::memcpyHToD(ptrDevTabSphere, ptrTabSphere, sizeOctetSpheres);
    	    }

    	Device::lastCudaError("RayTracing MM (end allocation)"); // temp debug, facultatif
    	}

    // Grid
	{
	this->dg = grid.dg;
	this->db = grid.db;
	}

    }

RayTracing::~RayTracing()
    {
    Device::free(ptrDevTabSphere);
    // rien
    }

/*-------------------------*\
 |*	Methode		    *|
 \*-------------------------*/

/**
 * Override
 * Call periodicly by the API
 *
 * Note : domaineMath pas use car pas zoomable
 */
void RayTracing::process(uchar4* ptrDevPixels, uint w, uint h, const DomaineMath& domaineMath)
    {
    static int i = 0;

    if (i % 3 == 0)
	{
	rayTracingGM<<<dg,db>>>(ptrDevTabSphere, ptrDevPixels, w, h, t);
	}
    else if (i % 3 == 1)
	{*/
	rayTracingCM<<<dg,db>>>(ptrDevPixels, w, h, t);
	}
    else if(i % 3 == 2)
	{
	rayTracingSM<<<dg,db>>>(ptrDevPixels, w, h, t);
	}


    }

/**
 * Override
 * Call periodicly by the API
 */
void RayTracing::animationStep()
    {
    t += dt;
    }

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/

