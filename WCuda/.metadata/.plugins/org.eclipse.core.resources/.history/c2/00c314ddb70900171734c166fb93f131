#pragma once

#include <math.h>
#include "MathTools.h"
#include "cudaTools.h"
#include "Sphere.h"

#include "ColorTools_GPU.h"
using namespace gpu;

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

class RayTracingMath
    {

	/*--------------------------------------*\
	|*		Constructor		*|
	 \*-------------------------------------*/

    public:

	__device__ RayTracingMath(int w, int h)
	    {
	    this->dim2 = w / 2;
	    }

	// constructeur copie automatique car pas pointeur dans VagueMath

	__device__
	    virtual ~RayTracingMath()
	    {
	    // rien
	    }

	/*--------------------------------------*\
	|*		Methodes		*|
	 \*-------------------------------------*/

    public:

	__device__
	void colorIJ(uchar4* ptrColor, int i, int j, float t, Sphere* sphereTab)
	    {
	    float2 xy;
	    xy = float2(1.f, 2.f);
	    float hcarre = sphereTab[1].hCarre(xy);
	    bool isEndessous = sphereTab[1].isEnDessous(hcarre);
	    float dz = sphereTab[1].dz(hcarre);
	    float distance = sphereTab[1].distance(dz);
	    float brightnesse = sphereTab[1].brightness(dz);

	    uchar levelGris;

	    f(&levelGris, i, j, t); // update levelGris

	    ptrColor->x = levelGris;
	    ptrColor->y = levelGris;
	    ptrColor->z = levelGris;
	    ptrColor->w = 255; // opaque
	    }

    private:

	__device__
	void f(uchar* ptrLevelGris, int i, int j, float t)
	    {
	    float dijResult = dij(i, j);

	    *ptrLevelGris = 128.f + 127.f * cosf(dijResult / 10.f - t / 7.f) / (dijResult / 10.f + 1.f);
	    }

	__device__
	float dij(int i, int j)
	    {
	    float fi = i - dim2;
	    float fj = j - dim2;
	    return sqrtf(fi * fi + fj * fj);
	    }

	/*--------------------------------------*\
	|*		Attributs		*|
	 \*-------------------------------------*/

    private:

	// Tools
	float dim2;

    };

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/
