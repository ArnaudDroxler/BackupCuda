#pragma once

#include <math.h>
#include "MathTools.h"
#include "cudaTools.h"
#include "Sphere.h"

#include "ColorTools_GPU.h"
using namespace gpu;

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

class RayTracingMath
    {

	/*--------------------------------------*\
	|*		Constructor		*|
	 \*-------------------------------------*/

    public:

	__device__ RayTracingMath(Sphere* sphereTab, int nbSpheres)
	    {
	    this->nbSpheres = nbSpheres;
	    this->sphereTab = sphereTab;
	    }

	// constructeur copie automatique car pas pointeur dans VagueMath

	__device__
	    virtual ~RayTracingMath()
	    {
	    // rien
	    }

	/*--------------------------------------*\
	|*		Methodes		*|
	 \*-------------------------------------*/

    public:

	__device__
	void colorIJ(uchar4* ptrColor, int i, int j, float t)
	    {
	    float min = 1000000.f;
	    float hueMin = -1000000.f;
	    float brightnessMin = -1000000.f;

	    float2 xy;
	    xy.x = i;
	    xy.y = j;

	    for(int i = 0; i < nbSpheres; i++)
		{
		Sphere sphere = sphereTab[i];
		float hCarre = sphere.hCarre(xy);

		if(sphere.isEnDessous(hCarre))
		    {
		    float dz = sphere.dz(hCarre);
		    float dist = sphere.distance(dz);

		    if(dist < min)
			{
			min = dist;
			hueMin = sphere.hue(t);
			brightnessMin = sphere.brightness(dz);
			}
		    }
		}
	    // Il y a une sphere au dessus du pixel
	    if(hueMin >= 0 && brightnessMin >= 0)
		{

		}
	    }

    private:

	__device__
	void f(uchar* ptrLevelGris, int i, int j, float t)
	    {
	    float dijResult = dij(i, j);

	    *ptrLevelGris = 128.f + 127.f * cosf(dijResult / 10.f - t / 7.f) / (dijResult / 10.f + 1.f);
	    }

	__device__
	float dij(int i, int j)
	    {
	    float fi = i - dim2;
	    float fj = j - dim2;
	    return sqrtf(fi * fi + fj * fj);
	    }

	/*--------------------------------------*\
	|*		Attributs		*|
	 \*-------------------------------------*/

    private:

	// Tools
	int nbSpheres;
	Sphere* sphereTab;

    };

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/
