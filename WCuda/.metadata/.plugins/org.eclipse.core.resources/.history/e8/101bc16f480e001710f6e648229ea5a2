#include "Indice2D.h"
#include "cudaTools.h"
#include "Device.h"
#include "IndiceTools_GPU.h"

#include "math/RayTracingMath.h"
#include "math/Sphere.h"
#include "length_cm.h"
using namespace gpu;

// Attention : 	Choix du nom est impotant!
//		VagueDevice.cu et non Vague.cu
// 		Dans ce dernier cas, probl�me de linkage, car le nom du .cu est le meme que le nom d'un .cpp (host)
//		On a donc ajouter Device (ou n'importequoi) pour que les noms soient diff�rents!

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Imported	 	*|
 \*-------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/
__host__ void uploadGPU(Sphere* tabSphere);



__global__ void rayTracingGM(Sphere* ptrDevTabSphere, uchar4* ptrDevPixels,uint w, uint h,float t);
__global__ void rayTracingCM(uchar4* ptrDevPixels,uint w, uint h,float t);
__global__ void rayTracingSM(Sphere* ptrDevTabSphere, uchar4* ptrDevPixels,uint w, uint h,float t);

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

__device__ void work (Sphere* ptrDevTabSphere,int nbSphere, uchar4* ptrDevPixels, uint w, uint h, float t);

__constant__ Sphere TAB_CM[LENGTH_CM];

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/
__host__ void uploadGPU(Sphere* tabSphere)
    {
    size_t size = LENGTH_CM * sizeof(Sphere);
    int offset = 0;
    HANDLE_ERROR(cudaMemcpyToSymbol(TAB_CM, tabSphere, size, offset, cudaMemcpyHostToDevice));
    }


__global__ void rayTracingGM(Sphere* ptrDevTabSphere, uchar4* ptrDevPixels, uint w, uint h, float t)
    {
    work(ptrDevTabSphere, LENGTH_CM, ptrDevPixels, w, h, t);
    }

__global__ void rayTracingCM(uchar4* ptrDevPixels,uint w, uint h,float t)
    {
    work(TAB_CM, LENGTH_CM, ptrDevPixels, w, h, t);
    }


__global__ void rayTracingGM(Sphere* ptrDevTabSphere, uchar4* ptrDevPixels, uint w, uint h, float t)
    {
    work(ptrDevTabSphere, LENGTH_CM, ptrDevPixels, w, h, t);
    }

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

__device__ void work (Sphere* ptrDevTabSphere,int nbSphere, uchar4* ptrDevPixels, uint w, uint h, float t)
    {
	RayTracingMath rayTracingMath = RayTracingMath(nbSphere, ptrDevTabSphere);

        const int WH=w*h;
        const int TID = Indice2D::tid();
        const int NB_THREAD = Indice2D::nbThread();

        int i;	// in [0,h[
        int j; 	// in [0,w[

        int s = TID;  // in [0,...
        while (s < WH)
    	{
    	IndiceTools::toIJ(s, w, &i, &j); 	// update (i, j)

    	rayTracingMath.colorIJ(&ptrDevPixels[s],i, j, t); 	// update ptrDevPixels[s]

    	s += NB_THREAD;
    	}
    }

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/

