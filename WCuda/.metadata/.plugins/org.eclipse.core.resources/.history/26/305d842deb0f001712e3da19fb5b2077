#pragma once

#include <math.h>

#include "FractaleMath.h"

using namespace gpu;

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

class JuliaMath : public FractaleMath
    {

	/*--------------------------------------*\
	|*		Constructor		*|
	 \*-------------------------------------*/

    public:

	__device__ JuliaMath(uint n, float c1, float c2) :
		FractaleMath(n)
	    {
	    this->c1 = c1;
	    this->c2 = c2;
	    }

	// constructeur copie automatique car pas pointeur dans VagueMath

	__device__ ~JuliaMath()
	    {
	    // rien
	    }

	/*--------------------------------------*\
	|*		Methodes		*|
	 \*-------------------------------------*/

    private:
	__device__ float f(float x, float y, int t)
	    {
	    float a = 0;
	    float b = 0;
	    float aCopy = 0;

	    for (int i = 0; i < t; i++)
		{
		aCopy = a;
		a = (a * a - b * b) + c1;
		b = 2.f * aCopy * b + c2;

		if (a * a + b * b > 4.f)
		    return i;
		}
	    return t;
	    }

	/*--------------------------------------*\
	|*		Attributs		*|
	 \*-------------------------------------*/

    private:

	// Inputs
	float c1;
	float c2;
    };

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/
